<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OutSystems.NssAdvanced_Excel</name>
    </assembly>
    <members>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssColumn_SetWidth(System.Object,System.Int32,System.Decimal)">
            <summary>
            Set the pixel width of a column on a specific worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssColumnNumber">The column number, starting at 1</param>
            <param name="ssDesiredWidth">The pixel width you desire for the column.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssRow_SetHeight(System.Object,System.Int32,System.Decimal)">
            <summary>
            Set the pixel height for a specific row in a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with
            </param>
            <param name="ssRowNumber">The number of the row to set the height for</param>
            <param name="ssDesiredHeight">The desired pixel height for the row</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_CalculateByName(System.Object,System.String)">
            <summary>
            Calculates the formula of a cell, defined by its name.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Cell-name (eg A4)</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_FormatRange(System.Object,System.Int32,System.Int32,System.Int32,System.Int32,OutSystems.NssAdvanced_Excel.RCCellFormatRecord)">
            <summary>
            Apply format to a range of cells.
            </summary>
            <param name="ssWorksheet">Worksheet to write to</param>
            <param name="ssRowStart">Start row (integer)</param>
            <param name="ssColumnStart">Start column (integer)</param>
            <param name="ssRowEnd">End row (integer)</param>
            <param name="ssColumnEnd">End column (integer)</param>
            <param name="ssCellFormat">CellFormat for the target cells</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_ReadByIndex(System.Object,System.Int32,System.Int32,System.Boolean,System.String@)">
            <summary>
            Reads the value of a cell, defined by its index.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssRow">row number</param>
            <param name="ssColumn">column number</param>
            <param name="ssReadText">If true always reads the cell value as text</param>
            <param name="ssCellValue">text-value</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_ReadByName(System.Object,System.String,System.Boolean,System.String@)">
            <summary>
            Reads the value of a cell, defined by its name.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Cell-name (eg A4)</param>
            <param name="ssReadText">If true always reads the cell value as text</param>
            <param name="ssCellValue">text-value</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_SetFormulaByIndex(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Write a formula to a cell, defined by its index.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssRow">rownumber</param>
            <param name="ssColumn">columnnumber</param>
            <param name="ssFormula">Formula</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_SetFormulaByName(System.Object,System.String,System.String)">
            <summary>
            Write a formula to a cell, defined by its name.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Cell-name (eg A4)</param>
            <param name="ssFormula">Formula</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_AddCopyWorksheet(System.Object,System.String,System.Object,System.Object@)">
            <summary>
            Adds a copy of a worksheet
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssWorksheetName">The name of the spreadsheet to create</param>
            <param name="ssWorksheetToCopy">The worksheet to be copied</param>
            <param name="ssWorksheet"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_GetImages(System.Object,OutSystems.NssAdvanced_Excel.RLImageRecordList@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssImages"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_SelectByIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_SelectByName(System.Object,System.String,System.String@)">
            <summary>
            Select a worksheet to work on by its name
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssWorksheetName">The name of the spreadsheet to select</param>
            <param name="ssWorksheet"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_DeleteByName(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssNameToDelete"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_DeleteByIndex(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssIndexToDelete"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_Chart_Create(System.Object,System.String,System.String,OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ssWorksheet">The worksheet you want to work with.</param>
            <param name="ssChartType">Receives the chart type in text, possible types:
            Area3D
            AreaStacked3D
            AreaStacked1003D
            BarClustered3D
            BarStacked3D
            BarStacked1003D
            Column3D
            ColumnClustered3D
            ColumnStacked3D
            ColumnStacked1003D
            Line3D
            Pie3D
            PieExploded3D
            Area
            AreaStacked
            AreaStacked100
            BarClustered
            BarOfPie
            BarStacked
            BarStacked100
            Bubble
            Bubble3DEffect
            ColumnClustered
            ColumnStacked
            ColumnStacked100
            ConeBarClustered
            ConeBarStacked
            ConeBarStacked100
            ConeCol
            ConeColClustered
            ConeColStacked
            ConeColStacked100
            CylinderBarClustered
            CylinderBarStacked
            CylinderBarStacked100
            CylinderCol
            CylinderColClustered
            CylinderColStacked
            CylinderColStacked100
            Doughnut
            DoughnutExploded
            Line
            LineMarkers
            LineMarkersStacked
            LineMarkersStacked100
            LineStacked
            LineStacked100
            Pie
            PieExploded
            PieOfPie
            PyramidBarClustered
            PyramidBarStacked
            PyramidBarStacked100
            PyramidCol
            PyramidColClustered
            PyramidColStacked
            PyramidColStacked100
            Radar
            RadarFilled
            RadarMarkers
            StockHLC
            StockOHLC
            StockVHLC
            StockVOHLC
            Surface
            SurfaceTopView
            SurfaceTopViewWireframe
            SurfaceWireframe
            XYScatter
            XYScatterLines
            XYScatterLinesNoMarkers
            XYScatterSmooth
            XYScatterSmoothNoMarkers=73</param>
            <param name="ssChartName"></param>
            <param name="ssDataSeries_List">List Of DataSeries</param>
            <param name="ssHeight">Expressed in pixels</param>
            <param name="ssWidth">Expressed in pixels</param>
            <param name="ssRowPos">Row position to place the upper left corner graph</param>
            <param name="ssColPos">Column position to place the upper left corner graph</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_AddName(System.Object,System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Create a defined &quot;Name&quot; (a word or string of characters in Excel that represents a cell, range of cells, formula, or constant value) in excel, starting in the RowStart / ColumnStart cell.
            </summary>
            <param name="ssWorksheet">Worksheet to write to</param>
            <param name="ssName">&quot;Name&quot;</param>
            <param name="ssDataSet">Values to assigned the name</param>
            <param name="ssRowStart">Start row number</param>
            <param name="ssColumnStart">Start column number</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_Open_BinaryData(System.Byte[],System.Object@)">
            <summary>
            Opens an existing workbook for editing and keeps it in memory
            </summary>
            <param name="ssBinaryData"></param>
            <param name="ssWorkbook"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_Create(System.Object@,System.String,System.Int32,OutSystems.NssAdvanced_Excel.RLNewSheetRecordList)">
            <summary>
            Creates a new excel workbook, optionally specifying the name of the fiirst sheet.
            </summary>
            <param name="ssWorkbook">The newly created workbook</param>
            <param name="ssFirstSheetName">Specify the name of the initial sheet in the workbook. Default = &quot;Sheet1&quot;</param>
            <param name="ssNrSheets">The number of sheets to add. Sheet names will be auto generated, i.e. Sheet1, Sheet2.</param>
            <param name="ssSheetNames">List of new sheets to add, with at least a name specified. The index, if specified, will be used to add sheets in that order.
            FirstSheetName and NrSheets are ignored if SheetNames is populated</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_Protect(System.Object,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set protection on the workbook level
            </summary>
            <param name="ssWorkbook">The workbook to work with</param>
            <param name="ssPassword">The password to set for the workbook. This does not encrypt the workbook.</param>
            <param name="ssLockStructure">Locks the structure,which prevents users from adding or deleting worksheets or from displaying hidden worksheets.</param>
            <param name="ssLockWindows">Locks the position of the workbook window.</param>
            <param name="ssLockRevision">Lock the workbook for revision</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_Protect(System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set protection on an Excel Worksheet
            </summary>
            <param name="ssWorksheet">Worksheet to protect</param>
            <param name="ssIsProtected">If the worksheet is protected.</param>
            <param name="ssPassword">Password to protect the worksheet with.</param>
            <param name="ssAllowAutoFilter">Allow users to use autofilters</param>
            <param name="ssAllowDeleteColumns">Allow users to delete columns</param>
            <param name="ssAllowDeleteRows">Allow users to delete rows</param>
            <param name="ssAllowEditObject">Allow users to edit objects</param>
            <param name="ssAllowEditScenarios">Allow users to edit senarios</param>
            <param name="ssAllowFormatCells">Allow users to format cells</param>
            <param name="ssAllowFormatColumns">Allow users to Format columns</param>
            <param name="ssAllowFormatRows">Allow users to Format rows</param>
            <param name="ssAllowInsertColumns">Allow users to insert columns</param>
            <param name="ssAllowInsertHyperlinks">Allow users to insert hyperlinks</param>
            <param name="ssAllowInsertRows">Allow users to Format rows</param>
            <param name="ssAllowPivotTables">Allow users to use pivottables</param>
            <param name="ssAllowSelectLockedCells">Allow users to select locked cells</param>
            <param name="ssAllowSelectUnlockedCells">Allow users to select unlocked cells</param>
            <param name="ssAllowSort">Allow users to sort a range</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssImage_Insert(System.Object,System.Byte[],System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Insert an image into a Worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssImageFile">Binary data of the image to be inserted</param>
            <param name="ssImageType">File type. BMP, PNG, JPG</param>
            <param name="ssImageName">Name reference for the image in the Worksheet</param>
            <param name="ssRowNumber">Row index where to insert image. Ignored if CellName is specified</param>
            <param name="ssColumnNumber">Column index where to insert image. Ignored if CellName is specified</param>
            <param name="ssCellName">Cell Name where to insert image</param>
            <param name="ssImageWidth">The width of the image in pixels</param>
            <param name="ssImageHeight">The height of the image in pixels</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_AddAutoFilter(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Add the automatic filter option of Excel to the specified range of cells.
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRangeToFilter">The range where to add the filter. If not supplied, the dimension of the worksheet will be used.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_AutofitColumns(System.Object)">
            <summary>
            Apply the column autofit action to the specified range of cells specified in the given worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssRange">The range to which to apply the autofit action.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssConditionalFormatting_DeleteRule(System.Object,System.Int32)">
            <summary>
            Delete a specified Conditional Formatting rule on a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRuleToDeleteIndex">The index of the rule to be deleted.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssConditionalFormatting_DeleteAllRules(System.Object)">
            <summary>
            Delete ALL Conditional Formatting rules for a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssComment_Add(System.Object,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a comment to a cell
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRowNumber">The row number of the cell to add the comment to.</param>
            <param name="ssColumnNumber">The column number of the cell to add the comment to.</param>
            <param name="ssText">The comment.</param>
            <param name="ssAuthor">The author of the comment.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssColumn_Delete(System.Object,System.Int32,System.Int32)">
            <summary>
            Delete column(s) from a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssStartColumnNumber">Column number where to start deleting columns.</param>
            <param name="ssNumberOfColumns">The number of rows to delete. Default = 1.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssComment_Delete(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Delete comment(s) in a specified range
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRange">Range to delete comments from.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssColumn_Insert(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts a new column into the spreadsheet.  Existing columns to the right of the insert index will be shifted right.  All formula are updated to take account of the new column.
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssInsertAt">Column number where to insert new column.</param>
            <param name="ssNumberOfColumns">The number of columns to insert.</param>
            <param name="ssCopyStylesFrom">Copy Styles from this column. Applied to all inserted columns. 0 (default) will not copy any styles</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssRow_Delete(System.Object,System.Int32,System.Int32)">
            <summary>
            Delete row(s) from a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssStartRowNumber">Row number where to start deleting rows.</param>
            <param name="ssNumberOfRows">The number of rows to delete. Default = 1.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_UnMerge(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Un-Merge cells in the range provided
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssRangeToUnmerge">The range of cell to un-merge</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_Merge(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Merge cells in the range provided
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssRangeToMerge">The range of the cells to merge</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCells_FindByValue(System.Object,System.String,OutSystems.NssAdvanced_Excel.RLRangeRecordList@)">
            <summary>
            Find all cells that contain the specified value in the given worksheet
            </summary>
            <param name="ssWorksheet">The worksheet in which to search</param>
            <param name="ssValueToFind">The value to search for</param>
            <param name="ssListOfCells">List of cells (ranges) where the value has been found</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssConditionalFormatting_GetAllRules(System.Object,OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList@)">
            <summary>
            Get a list of all the conditional formatting rules in a worksheet.
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssListOfRule">List of conditional formatting rules</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssConditionalFormatting_AddRule(System.Object,OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord)">
            <summary>
            Add a rule for conditionally formatting a range of cells.
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssConditionalFormatRecord">The conditional formatting to apply to the Address Range</param>        
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssRow_Insert(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts a new row into the spreadsheet.  Existing rows below the position are shifted down.  All formula are updated to take account of the new row.
            </summary>
            <param name="ssWorksheet">The worksheet to insert the row(s) into</param>
            <param name="ssInsertAt">The position of the new row
            </param>
            <param name="ssNrRows">Number of rows to insert</param>
            <param name="ssCopyStyleFromRow">Copy Styles from this row. Applied to all inserted rows. 0 will not copy any styles</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCellFormat_ApplyToRange(System.Object,OutSystems.NssAdvanced_Excel.RCCellFormatRecord,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Apply a specified cell format to the range specified for the given worksheet
            </summary>
            <param name="ssWorksheet">Worksheet object where formatting is to be applied</param>
            <param name="ssCellFormat">CellFormat to apply</param>
            <param name="ssRange">Range that CellFormat is to be applied to</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_Hide_Show(System.Object,System.Int32)">
            <summary>
            Hide / Show a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssHidden">Visible = 0 - The worksheet is visible
            Hidden = 1 - The worksheet is hidden but can be shown by the user via the user interface
            VeryHidden = 2 - The worksheet is hidden and cannot be shown by the user via the user interface</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssContainInRange(System.Object,System.String,System.String,System.String,System.Boolean@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssRange"></param>
            <param name="ssValue"></param>
            <param name="ssParameter1"></param>
            <param name="ssFound"></param>
            <param name="ssRowIndex"></param>
            <param name="ssColumnIndex"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssRow_Hide_Show(System.Object,System.Int32,System.Boolean)">
            <summary>
            Hides / Shows Row passed by index
            </summary>
            <param name="ssWorksheet">Worksheet to work with</param>
            <param name="ssRowIndex">Index of the Row to show/hide</param>
            <param name="ssHidden">True = Hide, False = Show</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_Calculate(System.Object)">
            <summary>
            Calculate all formulae for the entire workbook provided.
            </summary>
            <param name="ssWorkbook">The workbook to work with</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_Calculate(System.Object)">
            <summary>
            Calculate all formulae on the provided worksheet.
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssColumn_Hide_Show(System.Object,System.Int32,System.Boolean)">
            <summary>
            Hides / Shows Column passed by index
            </summary>
            <param name="ssWorksheet">The worksheet you want to work with.</param>
            <param name="ssColumn">The index of the column within the worksheet that you want to hide/show.</param>
            <param name="ssHidden">A Boolean value, set to True to hide the column, and to False to show the column.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_Read(System.Object,System.String,System.Int32,System.Int32,System.String@,System.Boolean)">
            <summary>
            Reads the value of a cell.
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Name of the cell to read from, i.e. A4. Required if CellRow and CellNumber set to 0.</param>
            <param name="ssCellRow">Row number of the cell to read from. Required if CellName not set.</param>
            <param name="ssCellColumn">Column number of the cell to read from. Required if CellName not set.</param>
            <param name="ssCellValue">The value in the cell, as text.</param>
            <param name="ssReadText">If true always reads the cell value as text</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_Write(System.Object,System.String,System.Int32,System.Int32,System.String,System.String,OutSystems.NssAdvanced_Excel.RCCellFormatRecord)">
            <summary>
            Write a converted value to a cell, defined by its index.
            Input is a worksheet-object.
            Accepts format for the target cell
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides </param>
            <param name="ssCellName">Name of the cell to write to, i.e. A4</param>
            <param name="ssCellRow">Row number of the cell to write to</param>
            <param name="ssCellColumn">Column number of the cell to write to</param>
            <param name="ssCellValue">The value to write to the cell</param>
            <param name="ssCellType">Type can by text (default), datetime, integer, decimal, boolean</param>
            <param name="ssCellFormat">CellFormat for the target cell</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_ChangeSheetIndex(System.Object,System.Int32,System.Int32)">
            <summary>
            Change the index of a worksheet in the document
            </summary>
            <param name="ssWorkbook">The workbook in which the change is to be made.</param>
            <param name="ssCurrentIndex">The current index(position) of the sheet in question</param>
            <param name="ssNewIndex">The new index for the sheet</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_Select(System.Object,System.Int32,System.String,System.Object@)">
            <summary>
            Select a worksheet by its index or by its name
            </summary>
            <param name="ssWorkbook">The workbook wherein the worksheet exists</param>
            <param name="ssWorksheetIndex">The index of the worksheet to find. Indexes start at 1</param>
            <param name="ssWorksheetName">The name of the worksheet to find</param>
            <param name="ssWorksheet">This is the worksheet object that you have been looking for,</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_Delete(System.Object,System.Int32,System.String)">
            <summary>
            Delete a worksheet in a workbook by specifying either the index, or the name of the worksheet.
            </summary>
            <param name="ssWorkbook">The workbook from which you want to delete the worksheet</param>
            <param name="ssIndexToDelete">The index of the worksheet to delete. Set to 0 if using the worksheet name to delete</param>
            <param name="ssNameToDelete">The name of the worksheet to delete. Set to empty string "" if using the index to delete.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkBook_AddSheet(System.Object,System.String,System.Object,System.Int32)">
            <summary>
            Add a worksheet to an existing workbook, optionally at the index specified. Specifying only a name will create a blank sheet. 
            Specifying  a name with binary data, will add the sheet from the existing binary data, and then rename to the newly provided name
            </summary>
            <param name="ssWorkbook">The workbook that you want to add the sheet to</param>
            <param name="ssWorksheetName">The name of the worksheet you want to add. If binary data is nullbinary(), an empty sheet will be added</param>
            <param name="ssWorksheet">The worksheet object that you want to add. Set to nullbinary() if adding a new sheet by name</param>
            <param name="ssIndexWhereToAdd">The index where to add the new sheet. Default will be highest sheet index plus 1</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_GetProperties(System.Object,OutSystems.NssAdvanced_Excel.RCWorkbookRecord@)">
            <summary>
            
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssProperties"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_GetProperties(System.Object,OutSystems.NssAdvanced_Excel.RCWorksheetRecord@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssProperties"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_GetName(System.Object,System.String@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssWorksheetName"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_WriteRange(System.Object,System.Int32,System.Int32,System.Object,OutSystems.NssAdvanced_Excel.RCCellFormatRecord,System.Boolean)">
            <summary>
            Write a dataset to a range of cells.
            Accepts format for the taget cells
            </summary>
            <param name="ssWorksheet">Worksheet to write to</param>
            <param name="ssRowStart">Start row (integer)</param>
            <param name="ssColumnStart">Start column (integer)</param>
            <param name="ssDataSet">Data to write</param>
            <param name="ssCellFormat">CellFormat for the target cell</param>
            <param name="ssExportHeaders">True if headers should be included in export</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_Close(System.Object)">
            <summary>
            
            </summary>
            <param name="ssWorkbook"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorksheet_Rename(System.Object,System.String)">
            <summary>
            Rename a worksheet
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssName"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_GetBinaryData(System.Object,System.Byte[]@)">
            <summary>
            Get the in-memory binary data of the specified workbook
            </summary>
            <param name="ssWorkbook">The workbook you want the binary data for</param>
            <param name="ssBinaryData">The binary data of the file</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssWorkbook_Open(System.String,System.Byte[],System.Object@)">
            <summary>
            Opens an existing workbook for editing by either specifying a name or the binary data.
            </summary>
            <param name="ssFileName">Location of the file that you want to open. Set to empty string "" when using binary data</param>
            <param name="ssBinary_Data">Binary data of the file that you want to open. Set to nullbinary() if using FileName</param>
            <param name="ssWorkbook">The workbook that you want to work with.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssChart_Create(System.Object,System.String,System.String,OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssChartType">Receives the graph type in text, possible types:
            Area3D
            AreaStacked3D
            AreaStacked1003D
            BarClustered3D
            BarStacked3D
            BarStacked1003D
            Column3D
            ColumnClustered3D
            ColumnStacked3D
            ColumnStacked1003D
            Line3D
            Pie3D
            PieExploded3D
            Area
            AreaStacked
            AreaStacked100
            BarClustered
            BarOfPie
            BarStacked
            BarStacked100
            Bubble
            Bubble3DEffect
            ColumnClustered
            ColumnStacked
            ColumnStacked100
            ConeBarClustered
            ConeBarStacked
            ConeBarStacked100
            ConeCol
            ConeColClustered
            ConeColStacked
            ConeColStacked100
            CylinderBarClustered
            CylinderBarStacked
            CylinderBarStacked100
            CylinderCol
            CylinderColClustered
            CylinderColStacked
            CylinderColStacked100
            Doughnut
            DoughnutExploded
            Line
            LineMarkers
            LineMarkersStacked
            LineMarkersStacked100
            LineStacked
            LineStacked100
            Pie
            PieExploded
            PieOfPie
            PyramidBarClustered
            PyramidBarStacked
            PyramidBarStacked100
            PyramidCol
            PyramidColClustered
            PyramidColStacked
            PyramidColStacked100
            Radar
            RadarFilled
            RadarMarkers
            StockHLC
            StockOHLC
            StockVHLC
            StockVOHLC
            Surface
            SurfaceTopView
            SurfaceTopViewWireframe
            SurfaceWireframe
            XYScatter
            XYScatterLines
            XYScatterLinesNoMarkers
            XYScatterSmooth
            XYScatterSmoothNoMarkers=73</param>
            <param name="ssChartName"></param>
            <param name="ssDataSeries_List">List Of DataSeries</param>
            <param name="ssHeight">Expressed in pixels</param>
            <param name="ssWidth">Expressed in pixels</param>
            <param name="ssRowPos">Row position to place the upper left corner graph</param>
            <param name="ssColPos">Column position to place the upper left corner graph</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.CssAdvanced_Excel.MssCell_CalculateByIndex(System.Object,System.Int32,System.Int32)">
            <summary>
            Calculates the formula of a cell, defined by its index.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssRow">row number</param>
            <param name="ssColumn">column number</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_Open(System.String,System.Byte[],System.Object@)">
            <summary>
            Opens an existing workbook for editing by either specifying a name or the binary data.
            </summary>
            <param name="ssFileName">Location of the file that you want to open. Set to empty string &quot;&quot; when using binary data</param>
            <param name="ssBinary_Data">Binary data of the file that you want to open. Set to nullbinary() if using FileName</param>
            <param name="ssWorkbook">The workbook that you want to work with.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_Select(System.Object,System.Int32,System.String,System.Object@)">
            <summary>
            Select a worksheet by its index or by its name
            </summary>
            <param name="ssWorkbook">The workbook wherein the worksheet exists</param>
            <param name="ssWorksheetIndex">The index of the worksheet to find. Indexes start at 1</param>
            <param name="ssWorksheetName">The name of the worksheet to find</param>
            <param name="ssWorksheet">This is the worksheet object that you have been looking for,</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_Create(System.Object@,System.String,System.Int32,OutSystems.NssAdvanced_Excel.RLNewSheetRecordList)">
            <summary>
            Creates a new excel workbook, optionally specifying the name of the fiirst sheet.
            </summary>
            <param name="ssWorkbook">The newly created workbook</param>
            <param name="ssFirstSheetName">Specify the name of the initial sheet in the workbook. Default = &quot;Sheet1&quot;</param>
            <param name="ssNrSheets">The number of sheets to add. Sheet names will be auto generated, i.e. Sheet1, Sheet2.</param>
            <param name="ssSheetNames">List of new sheets to add, with at least a name specified. The index, if specified, will be used to add sheets in that order.
            FirstSheetName and NrSheets are ignored if SheetNames is populated</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_GetBinaryData(System.Object,System.Byte[]@)">
            <summary>
            Get the in-memory binary data of the specified workbook
            </summary>
            <param name="ssWorkbook">The workbook you want the binary data for</param>
            <param name="ssBinaryData">The binary data of the file</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_Rename(System.Object,System.String)">
            <summary>
            Rename a worksheet
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssName">The new name for the spreadsheet</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_Close(System.Object)">
            <summary>
            Closes the excel workbook
            </summary>
            <param name="ssWorkbook"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssColumn_Hide_Show(System.Object,System.Int32,System.Boolean)">
            <summary>
            Hides / Shows a Column passed by index
            </summary>
            <param name="ssWorksheet">The worksheet you want to work with.</param>
            <param name="ssColumn">The index of the column within the worksheet that you want to hide/show.</param>
            <param name="ssHidden">A Boolean value, set to True to hide the column, and to False to show the column.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_Read(System.Object,System.String,System.Int32,System.Int32,System.String@,System.Boolean)">
            <summary>
            Reads the value of a cell.
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Name of the cell to read from, i.e. A4. Required if CellRow and CellNumber set to 0.</param>
            <param name="ssCellRow">Row number of the cell to read from. Required if CellName not set.</param>
            <param name="ssCellColumn">Column number of the cell to read from. Required if CellName not set.</param>
            <param name="ssCellValue">The value in the cell, as text.</param>
            <param name="ssReadText">If true always reads the cell value as text</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_Protect(System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set protection on an Excel Worksheet
            </summary>
            <param name="ssWorksheet">Worksheet to protect</param>
            <param name="ssIsProtected">If the worksheet is protected.</param>
            <param name="ssPassword">Password to protect the worksheet with.</param>
            <param name="ssAllowAutoFilter">Allow users to use autofilters</param>
            <param name="ssAllowDeleteColumns">Allow users to delete columns</param>
            <param name="ssAllowDeleteRows">Allow users to delete rows</param>
            <param name="ssAllowEditObject">Allow users to edit objects</param>
            <param name="ssAllowEditScenarios">Allow users to edit senarios</param>
            <param name="ssAllowFormatCells">Allow users to format cells</param>
            <param name="ssAllowFormatColumns">Allow users to Format columns</param>
            <param name="ssAllowFormatRows">Allow users to Format rows</param>
            <param name="ssAllowInsertColumns">Allow users to insert columns</param>
            <param name="ssAllowInsertHyperlinks">Allow users to insert hyperlinks</param>
            <param name="ssAllowInsertRows">Allow users to Format rows</param>
            <param name="ssAllowPivotTables">Allow users to use pivottables</param>
            <param name="ssAllowSelectLockedCells">Allow users to select locked cells</param>
            <param name="ssAllowSelectUnlockedCells">Allow users to select unlocked cells</param>
            <param name="ssAllowSort">Allow users to sort a range</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_Write(System.Object,System.String,System.Int32,System.Int32,System.String,System.String,OutSystems.NssAdvanced_Excel.RCCellFormatRecord)">
            <summary>
            Write a converted value to a cell.
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides </param>
            <param name="ssCellName">Name of the cell to write to, i.e. A4. Required if CellRow and CellColumn not set</param>
            <param name="ssCellRow">Row number of the cell to write to. Required if CellName not set.</param>
            <param name="ssCellColumn">Column number of the cell to write to. Required if CellName not set.</param>
            <param name="ssCellValue">The value to write to the cell</param>
            <param name="ssCellType">Type can be:
            text (default),
            datetime,
            integer,
            decimal,
            boolean,
            formula</param>
            <param name="ssCellFormat">CellFormat for the target cell</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_WriteRange(System.Object,System.Int32,System.Int32,System.Object,OutSystems.NssAdvanced_Excel.RCCellFormatRecord,System.Boolean)">
            <summary>
            Write a dataset to a range of cells.
            Accepts format for the target cells
            </summary>
            <param name="ssWorksheet">Worksheet to write to</param>
            <param name="ssRowStart">Start row (integer)</param>
            <param name="ssColumnStart">Start column (integer)</param>
            <param name="ssDataSet">Data to write</param>
            <param name="ssCellFormat">CellFormat for the target cells</param>
            <param name="ssExportHeaders">True to include headers in export file. Default value = False</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_GetName(System.Object,System.String@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssWorksheetName"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_GetProperties(System.Object,OutSystems.NssAdvanced_Excel.RCWorkbookRecord@)">
            <summary>
            Get all properties of the workbook
            </summary>
            <param name="ssWorkbook">The workbook</param>
            <param name="ssProperties"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_GetProperties(System.Object,OutSystems.NssAdvanced_Excel.RCWorksheetRecord@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssProperties"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkBook_AddSheet(System.Object,System.String,System.Object,System.Int32)">
            <summary>
            Add a worksheet to an existing workbook, optionally at the index specified. Specifying only a name will create a blank sheet. Specifying  a name with binary data, will add the sheet from the existing binary data, and then rename to the newly provided name
            </summary>
            <param name="ssWorkbook">The workbook that you want to add the sheet to</param>
            <param name="ssWorksheetName">The name of the worksheet you want to add. If binary data is nullbinary(), an empty sheet will be added</param>
            <param name="ssWorksheet">The worksheet object that you want to add. Set to nullbinary() if adding a new sheet by name</param>
            <param name="ssIndexWhereToAdd">The index where to add the new sheet. Default will be highest sheet index plus 1</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_Delete(System.Object,System.Int32,System.String)">
            <summary>
            Delete a worksheet in a workbook by specifying either the index, or the name of the worksheet.
            </summary>
            <param name="ssWorkbook">The workbook from which you want to delete the worksheet</param>
            <param name="ssIndexToDelete">The index of the worksheet to delete. Set to 0 if using the worksheet name to delete</param>
            <param name="ssNameToDelete">The name of the worksheet to delete. Set to empty string &quot;&quot; if using the index to delete.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssChart_Create(System.Object,System.String,System.String,OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssChartType">Receives the chart type in text, possible types:
            Area3D
            AreaStacked3D
            AreaStacked1003D
            BarClustered3D
            BarStacked3D
            BarStacked1003D
            Column3D
            ColumnClustered3D
            ColumnStacked3D
            ColumnStacked1003D
            Line3D
            Pie3D
            PieExploded3D
            Area
            AreaStacked
            AreaStacked100
            BarClustered
            BarOfPie
            BarStacked
            BarStacked100
            Bubble
            Bubble3DEffect
            ColumnClustered
            ColumnStacked
            ColumnStacked100
            ConeBarClustered
            ConeBarStacked
            ConeBarStacked100
            ConeCol
            ConeColClustered
            ConeColStacked
            ConeColStacked100
            CylinderBarClustered
            CylinderBarStacked
            CylinderBarStacked100
            CylinderCol
            CylinderColClustered
            CylinderColStacked
            CylinderColStacked100
            Doughnut
            DoughnutExploded
            Line
            LineMarkers
            LineMarkersStacked
            LineMarkersStacked100
            LineStacked
            LineStacked100
            Pie
            PieExploded
            PieOfPie
            PyramidBarClustered
            PyramidBarStacked
            PyramidBarStacked100
            PyramidCol
            PyramidColClustered
            PyramidColStacked
            PyramidColStacked100
            Radar
            RadarFilled
            RadarMarkers
            StockHLC
            StockOHLC
            StockVHLC
            StockVOHLC
            Surface
            SurfaceTopView
            SurfaceTopViewWireframe
            SurfaceWireframe
            XYScatter
            XYScatterLines
            XYScatterLinesNoMarkers
            XYScatterSmooth
            XYScatterSmoothNoMarkers=73</param>
            <param name="ssChartName"></param>
            <param name="ssDataSeries_List">List Of DataSeries</param>
            <param name="ssHeight">Expressed in pixels</param>
            <param name="ssWidth">Expressed in pixels</param>
            <param name="ssRowPos">Row position to place the upper left corner graph</param>
            <param name="ssColPos">Column position to place the upper left corner graph</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssRow_Insert(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts a new row into the spreadsheet.  Existing rows below the position are shifted down.  All formula are updated to take account of the new row.
            </summary>
            <param name="ssWorksheet">The worksheet to insert the row(s) into</param>
            <param name="ssInsertAt">The position of the new row
            </param>
            <param name="ssNrRows">Number of rows to insert</param>
            <param name="ssCopyStyleFromRow">Copy Styles from this row. Applied to all inserted rows. 0 will not copy any styles</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_ChangeSheetIndex(System.Object,System.Int32,System.Int32)">
            <summary>
            Change the index of a worksheet in the document
            </summary>
            <param name="ssWorkbook">The workbook in which the change is to be made.</param>
            <param name="ssCurrentIndex">The current index(position) of the sheet in question</param>
            <param name="ssNewIndex">The new index for the sheet</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCellFormat_ApplyToRange(System.Object,OutSystems.NssAdvanced_Excel.RCCellFormatRecord,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Apply a specified cell format to the range specified for the given worksheet
            </summary>
            <param name="ssWorksheet">Worksheet object where formatting is to be applied</param>
            <param name="ssCellFormat">CellFormat to apply</param>
            <param name="ssRange">Range that CellFormat is to be applied to</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCells_FindByValue(System.Object,System.String,OutSystems.NssAdvanced_Excel.RLRangeRecordList@)">
            <summary>
            Find all cells that contain the specified value in the given worksheet
            </summary>
            <param name="ssWorksheet">The worksheet in which to search</param>
            <param name="ssValueToFind">The value to search for</param>
            <param name="ssListOfCells">List of cells (ranges) where the value has been found</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssContainInRange(System.Object,System.String,System.String,System.String,System.Boolean@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssRange"></param>
            <param name="ssValue"></param>
            <param name="ssParameter1"></param>
            <param name="ssFound"></param>
            <param name="ssRowIndex"></param>
            <param name="ssColumnIndex"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_Calculate(System.Object)">
            <summary>
            Calculate all formulae for the entire workbook provided.
            </summary>
            <param name="ssWorkbook">The workbook to work with</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_Calculate(System.Object)">
            <summary>
            Calculate all formulae on the provided worksheet.
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssRow_Hide_Show(System.Object,System.Int32,System.Boolean)">
            <summary>
            Hides / Shows Row passed by index
            </summary>
            <param name="ssWorksheet">Worksheet to work with</param>
            <param name="ssRowIndex">Index of the Row to show/hide</param>
            <param name="ssHidden">A Boolean value, set to True to hide the row and to False to show the row</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_Hide_Show(System.Object,System.Int32)">
            <summary>
            Hide / Show a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssHidden">Visible = 0 - The worksheet is visible
            Hidden = 1 - The worksheet is hidden but can be shown by the user via the user interface
            VeryHidden = 2 - The worksheet is hidden and cannot be shown by the user via the user interface</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssConditionalFormatting_AddRule(System.Object,OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord)">
            <summary>
            Add a rule for conditionally formatting a range of cells.
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssConditionalFormatRecord">The conditional formatting to apply to the Address Range</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssConditionalFormatting_GetAllRules(System.Object,OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList@)">
            <summary>
            Get a list of all the conditional formatting rules in a worksheet.
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssListOfRule">List of conditional formatting rules</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_Merge(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Merge cells in the range provided
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssRangeToMerge">The range of the cells to merge</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_UnMerge(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Un-Merge cells in the range provided
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssRangeToUnmerge">The range of cell to un-merge</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssRow_Delete(System.Object,System.Int32,System.Int32)">
            <summary>
            Delete row(s) from a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssStartRowNumber">Row number where to start deleting rows.</param>
            <param name="ssNumberOfRows">The number of rows to delete. Default = 1.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssColumn_Delete(System.Object,System.Int32,System.Int32)">
            <summary>
            Delete column(s) from a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssStartColumnNumber">Column number where to start deleting columns.</param>
            <param name="ssNumberOfColumns">The number of rows to delete. Default = 1.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssComment_Delete(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Delete comment(s) in a specified range
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRange">Range to delete comments from.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssComment_Add(System.Object,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a comment to a cell
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRowNumber">The row number of the cell to add the comment to.</param>
            <param name="ssColumnNumber">The column number of the cell to add the comment to.</param>
            <param name="ssText">The comment.</param>
            <param name="ssAuthor">The author of the comment.</param>
            <param name="ssAutofit">True to autofit the comment window to the comment text</param>
            <param name="ssIsRichText">Is the comment rich text</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssColumn_Insert(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts a new column into the spreadsheet.  Existing columns to the right of the insert index will be shifted right.  All formula are updated to take account of the new column.
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssInsertAt">Column number where to insert new column.</param>
            <param name="ssNumberOfColumns">The number of columns to insert.</param>
            <param name="ssCopyStylesFrom">Copy Styles from this column. Applied to all inserted columns. 0 (default) will not copy any styles</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssConditionalFormatting_DeleteRule(System.Object,System.Int32)">
            <summary>
            Delete a specified Conditional Formatting rule on a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRuleToDeleteIndex">The index of the rule to be deleted.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssConditionalFormatting_DeleteAllRules(System.Object)">
            <summary>
            Delete ALL Conditional Formatting rules for a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssImage_Insert(System.Object,System.Byte[],System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Insert an image into a Worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssImageFile">Binary data of the image to be inserted</param>
            <param name="ssImageType">File type. BMP, PNG, JPG</param>
            <param name="ssImageName">Name reference for the image in the Worksheet</param>
            <param name="ssRowNumber">Row index where to insert image. Ignored if CellName is specified</param>
            <param name="ssColumnNumber">Column index where to insert image. Ignored if CellName is specified</param>
            <param name="ssCellName">Cell Name where to insert image</param>
            <param name="ssImageWidth">The width of the image in pixels</param>
            <param name="ssImageHeight">The height of the image in pixels</param>
            <param name="ssMarginTop"> Offset in pixels	</param>
            <param name="ssMarginLeft"> Offset in pixels</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_AutofitColumns(System.Object)">
            <summary>
            Apply the column autofit action to the specified range of cells specified in the given worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_AddAutoFilter(System.Object,OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Add the automatic filter option of Excel to the specified range of cells.
            </summary>
            <param name="ssWorksheet">The worksheet to work with.</param>
            <param name="ssRangeToFilter">The range where to add the filter. If not supplied, the dimension of the worksheet will be used.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_Protect(System.Object,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set protection on the workbook level
            </summary>
            <param name="ssWorkbook">The workbook to work with</param>
            <param name="ssPassword">The password to set for the workbook. This does not encrypt the workbook.</param>
            <param name="ssLockStructure">Locks the structure,which prevents users from adding or deleting worksheets or from displaying hidden worksheets.</param>
            <param name="ssLockWindows">Locks the position of the workbook window.</param>
            <param name="ssLockRevision">Lock the workbook for revision</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_CalculateByIndex(System.Object,System.Int32,System.Int32)">
            <summary>
            Calculates the formula of a cell, defined by its index.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssRow">Row Number</param>
            <param name="ssColumn">Column Number</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_CalculateByName(System.Object,System.String)">
            <summary>
            Calculates the formula of a cell, defined by its name.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Cell-name (eg A4)</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_FormatRange(System.Object,System.Int32,System.Int32,System.Int32,System.Int32,OutSystems.NssAdvanced_Excel.RCCellFormatRecord)">
            <summary>
            Apply format to a range of cells.
            </summary>
            <param name="ssWorksheet">Worksheet to write to</param>
            <param name="ssRowStart">Start row (integer)</param>
            <param name="ssColumnStart">Start column (integer)</param>
            <param name="ssRowEnd">End row (integer)</param>
            <param name="ssColumnEnd">End column (integer)</param>
            <param name="ssCellFormat">CellFormat for the target cells</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_ReadByIndex(System.Object,System.Int32,System.Int32,System.Boolean,System.String@)">
            <summary>
            Reads the value of a cell, defined by its index.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssRow">row number</param>
            <param name="ssColumn">column number</param>
            <param name="ssReadText">If true always reads the cell value as text</param>
            <param name="ssCellValue">text-value</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_ReadByName(System.Object,System.String,System.Boolean,System.String@)">
            <summary>
            Reads the value of a cell, defined by its name.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Cell-name (eg A4)</param>
            <param name="ssReadText">If true always reads the cell value as text</param>
            <param name="ssCellValue">text-value</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_SetFormulaByIndex(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Write a formula to a cell, defined by its index.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssRow">rownumber</param>
            <param name="ssColumn">columnnumber</param>
            <param name="ssFormula">Formula</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssCell_SetFormulaByName(System.Object,System.String,System.String)">
            <summary>
            Write a formula to a cell, defined by its name.
            Input is a worksheet-object
            </summary>
            <param name="ssWorksheet">Worksheet on which the cell resides</param>
            <param name="ssCellName">Cell-name (eg A4)</param>
            <param name="ssFormula">Formula</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_AddCopyWorksheet(System.Object,System.String,System.Object,System.Object@)">
            <summary>
            Adds a copy of a worksheet
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssWorksheetName">The name of the spreadsheet to create</param>
            <param name="ssWorksheetToCopy">The worksheet to be copied</param>
            <param name="ssWorksheet"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_GetImages(System.Object,OutSystems.NssAdvanced_Excel.RLImageRecordList@)">
            <summary>
            
            </summary>
            <param name="ssWorksheet"></param>
            <param name="ssImages"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_SelectByIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_SelectByName(System.Object,System.String,System.String@)">
            <summary>
            Select a worksheet to work on by its name
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssWorksheetName">The name of the spreadsheet to select</param>
            <param name="ssWorksheet"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_DeleteByName(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssNameToDelete"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_DeleteByIndex(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="ssWorkbook"></param>
            <param name="ssIndexToDelete"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_Chart_Create(System.Object,System.String,System.String,OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ssWorksheet">The worksheet you want to work with.</param>
            <param name="ssChartType">Receives the chart type in text, possible types:
            Area3D
            AreaStacked3D
            AreaStacked1003D
            BarClustered3D
            BarStacked3D
            BarStacked1003D
            Column3D
            ColumnClustered3D
            ColumnStacked3D
            ColumnStacked1003D
            Line3D
            Pie3D
            PieExploded3D
            Area
            AreaStacked
            AreaStacked100
            BarClustered
            BarOfPie
            BarStacked
            BarStacked100
            Bubble
            Bubble3DEffect
            ColumnClustered
            ColumnStacked
            ColumnStacked100
            ConeBarClustered
            ConeBarStacked
            ConeBarStacked100
            ConeCol
            ConeColClustered
            ConeColStacked
            ConeColStacked100
            CylinderBarClustered
            CylinderBarStacked
            CylinderBarStacked100
            CylinderCol
            CylinderColClustered
            CylinderColStacked
            CylinderColStacked100
            Doughnut
            DoughnutExploded
            Line
            LineMarkers
            LineMarkersStacked
            LineMarkersStacked100
            LineStacked
            LineStacked100
            Pie
            PieExploded
            PieOfPie
            PyramidBarClustered
            PyramidBarStacked
            PyramidBarStacked100
            PyramidCol
            PyramidColClustered
            PyramidColStacked
            PyramidColStacked100
            Radar
            RadarFilled
            RadarMarkers
            StockHLC
            StockOHLC
            StockVHLC
            StockVOHLC
            Surface
            SurfaceTopView
            SurfaceTopViewWireframe
            SurfaceWireframe
            XYScatter
            XYScatterLines
            XYScatterLinesNoMarkers
            XYScatterSmooth
            XYScatterSmoothNoMarkers=73</param>
            <param name="ssChartName"></param>
            <param name="ssDataSeries_List">List Of DataSeries</param>
            <param name="ssHeight">Expressed in pixels</param>
            <param name="ssWidth">Expressed in pixels</param>
            <param name="ssRowPos">Row position to place the upper left corner graph</param>
            <param name="ssColPos">Column position to place the upper left corner graph</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorksheet_AddName(System.Object,System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Create a defined &quot;Name&quot; (a word or string of characters in Excel that represents a cell, range of cells, formula, or constant value) in excel, starting in the RowStart / ColumnStart cell.
            </summary>
            <param name="ssWorksheet">Worksheet to write to</param>
            <param name="ssName">&quot;Name&quot;</param>
            <param name="ssDataSet">Values to assigned the name</param>
            <param name="ssRowStart">Start row number</param>
            <param name="ssColumnStart">Start column number</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssWorkbook_Open_BinaryData(System.Byte[],System.Object@)">
            <summary>
            Opens an existing workbook for editing and keeps it in memory
            </summary>
            <param name="ssBinaryData"></param>
            <param name="ssWorkbook"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssColumn_SetWidth(System.Object,System.Int32,System.Decimal)">
            <summary>
            Set the pixel width of a column on a specific worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with</param>
            <param name="ssColumnNumber">The column number, starting at 1</param>
            <param name="ssDesiredWidth">The pixel width you desire for the column.</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.IssAdvanced_Excel.MssRow_SetHeight(System.Object,System.Int32,System.Decimal)">
            <summary>
            Set the pixel height for a specific row in a worksheet
            </summary>
            <param name="ssWorksheet">The worksheet to work with
            </param>
            <param name="ssRowNumber">The number of the row to set the height for</param>
            <param name="ssDesiredHeight">The desired pixel height for the row</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STCellFormatStructure">
            <summary>
            Structure <code>STCellFormatStructure</code> that represents the Service Studio structure
             <code>CellFormat</code> <p> Description: Structure to define all the formatting attributes that ca
            n apply to a cell.</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STCellFormatStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STCellFormatStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STCellFormatStructure.ReadIM(OutSystems.NssAdvanced_Excel.STCellFormatStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STWorkbookStructure">
            <summary>
            Structure <code>STWorkbookStructure</code> that represents the Service Studio structure
             <code>Workbook</code> <p> Description: The Excel File</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STWorkbookStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STWorkbookStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STWorkbookStructure.ReadIM(OutSystems.NssAdvanced_Excel.STWorkbookStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STWorksheetStructure">
            <summary>
            Structure <code>STWorksheetStructure</code> that represents the Service Studio structure
             <code>Worksheet</code> <p> Description: Structure defining attributes pertaining to
            a worksheet</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STWorksheetStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STWorksheetStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STWorksheetStructure.ReadIM(OutSystems.NssAdvanced_Excel.STWorksheetStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STColorStructure">
            <summary>
            Structure <code>STColorStructure</code> that represents the Service Studio structure
             <code>Color</code> <p> Description: Represents an ARGB (alpha, red, green, blue) color.</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STColorStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STColorStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STColorStructure.ReadIM(OutSystems.NssAdvanced_Excel.STColorStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STDimensionStructure">
            <summary>
            Structure <code>STDimensionStructure</code> that represents the Service Studio structure
             <code>Dimension</code> <p> Description: Worksheet dimension structure</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STDimensionStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STDimensionStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STDimensionStructure.ReadIM(OutSystems.NssAdvanced_Excel.STDimensionStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STAddressStructure">
            <summary>
            Structure <code>STAddressStructure</code> that represents the Service Studio structure
             <code>Address</code> <p> Description: Excel Address Structure</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STAddressStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STAddressStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STAddressStructure.ReadIM(OutSystems.NssAdvanced_Excel.STAddressStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STRangeStructure">
            <summary>
            Structure <code>STRangeStructure</code> that represents the Service Studio structure
             <code>Range</code> <p> Description: Describes a range of cells from RowStart, ColStart to RowEnd
            , ColEnd, where 1,1 is the the 1A cell</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STRangeStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STRangeStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STRangeStructure.ReadIM(OutSystems.NssAdvanced_Excel.STRangeStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STDataSeriesStructure">
            <summary>
            Structure <code>STDataSeriesStructure</code> that represents the Service Studio structure
             <code>DataSeries</code> <p> Description: Data series to be used in graphs, the n cell of the valu
            e range will correspond to the n cell of the label range</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STDataSeriesStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STDataSeriesStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STDataSeriesStructure.ReadIM(OutSystems.NssAdvanced_Excel.STDataSeriesStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STConditionalFormatItemStructure">
            <summary>
            Structure <code>STConditionalFormatItemStructure</code> that represents the Service Studio
             structure <code>ConditionalFormatItem</code> <p> Description: Represents a conditional formattin
            g item.</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STConditionalFormatItemStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STConditionalFormatItemStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STConditionalFormatItemStructure.ReadIM(OutSystems.NssAdvanced_Excel.STConditionalFormatItemStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STConditionalFormatStyleStructure">
            <summary>
            Structure <code>STConditionalFormatStyleStructure</code> that represents the Service Studio
             structure <code>ConditionalFormatStyle</code> <p> Description: Style (format) options fo
            r Conditional Formatting.</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STConditionalFormatStyleStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STConditionalFormatStyleStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STConditionalFormatStyleStructure.ReadIM(OutSystems.NssAdvanced_Excel.STConditionalFormatStyleStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STBorderStyleStructure">
            <summary>
            Structure <code>STBorderStyleStructure</code> that represents the Service Studio structure
             <code>BorderStyle</code> <p> Description: Style and color of border</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STBorderStyleStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STBorderStyleStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STBorderStyleStructure.ReadIM(OutSystems.NssAdvanced_Excel.STBorderStyleStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STFillStyleStructure">
            <summary>
            Structure <code>STFillStyleStructure</code> that represents the Service Studio structure
             <code>FillStyle</code> <p> Description: Fill properties</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STFillStyleStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STFillStyleStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STFillStyleStructure.ReadIM(OutSystems.NssAdvanced_Excel.STFillStyleStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STFontStyleStructure">
            <summary>
            Structure <code>STFontStyleStructure</code> that represents the Service Studio structure
             <code>FontStyle</code> <p> Description: </p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STFontStyleStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STFontStyleStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STFontStyleStructure.ReadIM(OutSystems.NssAdvanced_Excel.STFontStyleStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STNewSheetStructure">
            <summary>
            Structure <code>STNewSheetStructure</code> that represents the Service Studio structure
             <code>NewSheet</code> <p> Description: New worksheet object</p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STNewSheetStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STNewSheetStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STNewSheetStructure.ReadIM(OutSystems.NssAdvanced_Excel.STNewSheetStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STImageStructure">
            <summary>
            Structure <code>STImageStructure</code> that represents the Service Studio structure
             <code>Image</code> <p> Description: </p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STImageStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STImageStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STImageStructure.ReadIM(OutSystems.NssAdvanced_Excel.STImageStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.STProtectionStructure">
            <summary>
            Structure <code>STProtectionStructure</code> that represents the Service Studio structure
             <code>Protection</code> <p> Description: </p>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STProtectionStructure.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STProtectionStructure.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.STProtectionStructure.ReadIM(OutSystems.NssAdvanced_Excel.STProtectionStructure)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLCellFormatRecordList">
            <summary>
            RecordList type <code>RLCellFormatRecordList</code> that represents a record list of
             <code>CellFormat</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLCellFormatRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLCellFormatRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLCellFormatRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCCellFormatRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLCellFormatRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLCellFormatRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLWorkbookRecordList">
            <summary>
            RecordList type <code>RLWorkbookRecordList</code> that represents a record list of
             <code>Workbook</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorkbookRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorkbookRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorkbookRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCWorkbookRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorkbookRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorkbookRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLWorksheetRecordList">
            <summary>
            RecordList type <code>RLWorksheetRecordList</code> that represents a record list of
             <code>Worksheet</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorksheetRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorksheetRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorksheetRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCWorksheetRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorksheetRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLWorksheetRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLColorRecordList">
            <summary>
            RecordList type <code>RLColorRecordList</code> that represents a record list of <code>Color</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLColorRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLColorRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLColorRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCColorRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLColorRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLColorRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLDimensionRecordList">
            <summary>
            RecordList type <code>RLDimensionRecordList</code> that represents a record list of
             <code>Dimension</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDimensionRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDimensionRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDimensionRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCDimensionRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDimensionRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDimensionRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLAddressRecordList">
            <summary>
            RecordList type <code>RLAddressRecordList</code> that represents a record list of
             <code>Address</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLAddressRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLAddressRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLAddressRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCAddressRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLAddressRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLAddressRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLRangeRecordList">
            <summary>
            RecordList type <code>RLRangeRecordList</code> that represents a record list of <code>Range</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLRangeRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLRangeRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLRangeRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCRangeRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLRangeRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLRangeRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList">
            <summary>
            RecordList type <code>RLDataSeriesRecordList</code> that represents a record list of
             <code>DataSeries</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCDataSeriesRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLDataSeriesRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList">
            <summary>
            RecordList type <code>RLConditionalFormatItemRecordList</code> that represents a record list of
             <code>ConditionalFormatItem</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatItemRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLConditionalFormatStyleRecordList">
            <summary>
            RecordList type <code>RLConditionalFormatStyleRecordList</code> that represents a record list of
             <code>ConditionalFormatStyle</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatStyleRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatStyleRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatStyleRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCConditionalFormatStyleRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatStyleRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLConditionalFormatStyleRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLBorderStyleRecordList">
            <summary>
            RecordList type <code>RLBorderStyleRecordList</code> that represents a record list of
             <code>BorderStyle</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLBorderStyleRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLBorderStyleRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLBorderStyleRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCBorderStyleRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLBorderStyleRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLBorderStyleRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLFillStyleRecordList">
            <summary>
            RecordList type <code>RLFillStyleRecordList</code> that represents a record list of
             <code>FillStyle</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFillStyleRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFillStyleRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFillStyleRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCFillStyleRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFillStyleRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFillStyleRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLFontStyleRecordList">
            <summary>
            RecordList type <code>RLFontStyleRecordList</code> that represents a record list of
             <code>FontStyle</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFontStyleRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFontStyleRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFontStyleRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCFontStyleRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFontStyleRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLFontStyleRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLNewSheetRecordList">
            <summary>
            RecordList type <code>RLNewSheetRecordList</code> that represents a record list of
             <code>NewSheet</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLNewSheetRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLNewSheetRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLNewSheetRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCNewSheetRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLNewSheetRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLNewSheetRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLImageRecordList">
            <summary>
            RecordList type <code>RLImageRecordList</code> that represents a record list of <code>Image</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLImageRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLImageRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLImageRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCImageRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLImageRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLImageRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RLProtectionRecordList">
            <summary>
            RecordList type <code>RLProtectionRecordList</code> that represents a record list of
             <code>Protection</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLProtectionRecordList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLProtectionRecordList.#ctor(System.Data.IDbTransaction)">
            <summary>
            Constructor with transaction parameter
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLProtectionRecordList.#ctor(System.Data.IDbTransaction,OutSystems.HubEdition.RuntimePlatform.Db.OSList{OutSystems.NssAdvanced_Excel.RCProtectionRecord}.ReadDBMethodDelegate)">
            <summary>
            Constructor with transaction parameter and alternate read method
            </summary>
            <param name="trans"> IDbTransaction Parameter</param>
            <param name="alternateReadDBMethod"> Alternate Read Method</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLProtectionRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor declaration for serialization
            </summary>
            <param name="info"> SerializationInfo</param>
            <param name="context"> StreamingContext</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RLProtectionRecordList.NewList">
            <summary>
            Create as new list
            </summary>
            <returns>The new record list</returns>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCCellFormatRecord">
            <summary>
            Structure <code>RCCellFormatRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCCellFormatRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCCellFormatRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCCellFormatRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCCellFormatRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCWorkbookRecord">
            <summary>
            Structure <code>RCWorkbookRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCWorkbookRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCWorkbookRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCWorkbookRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCWorkbookRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCWorksheetRecord">
            <summary>
            Structure <code>RCWorksheetRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCWorksheetRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCWorksheetRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCWorksheetRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCWorksheetRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCColorRecord">
            <summary>
            Structure <code>RCColorRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCColorRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCColorRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCColorRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCColorRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCDimensionRecord">
            <summary>
            Structure <code>RCDimensionRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCDimensionRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCDimensionRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCDimensionRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCDimensionRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCAddressRecord">
            <summary>
            Structure <code>RCAddressRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCAddressRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCAddressRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCAddressRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCAddressRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCRangeRecord">
            <summary>
            Structure <code>RCRangeRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCRangeRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCRangeRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCRangeRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCRangeRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCDataSeriesRecord">
            <summary>
            Structure <code>RCDataSeriesRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCDataSeriesRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCDataSeriesRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCDataSeriesRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCDataSeriesRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord">
            <summary>
            Structure <code>RCConditionalFormatItemRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCConditionalFormatItemRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCConditionalFormatStyleRecord">
            <summary>
            Structure <code>RCConditionalFormatStyleRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCConditionalFormatStyleRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCConditionalFormatStyleRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCConditionalFormatStyleRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCConditionalFormatStyleRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCBorderStyleRecord">
            <summary>
            Structure <code>RCBorderStyleRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCBorderStyleRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCBorderStyleRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCBorderStyleRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCBorderStyleRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCFillStyleRecord">
            <summary>
            Structure <code>RCFillStyleRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCFillStyleRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCFillStyleRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCFillStyleRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCFillStyleRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCFontStyleRecord">
            <summary>
            Structure <code>RCFontStyleRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCFontStyleRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCFontStyleRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCFontStyleRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCFontStyleRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCNewSheetRecord">
            <summary>
            Structure <code>RCNewSheetRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCNewSheetRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCNewSheetRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCNewSheetRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCNewSheetRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCImageRecord">
            <summary>
            Structure <code>RCImageRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCImageRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCImageRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCImageRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCImageRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="T:OutSystems.NssAdvanced_Excel.RCProtectionRecord">
            <summary>
            Structure <code>RCProtectionRecord</code>
            </summary>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCProtectionRecord.Read(System.Data.IDataReader,System.Int32@)">
            <summary>
            Read a record from database
            </summary>
            <param name="r"> Data base reader</param>
            <param name="index"> index</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCProtectionRecord.ReadDB(System.Data.IDataReader)">
            <summary>
            Read from database
            </summary>
            <param name="r"> Data reader</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.RCProtectionRecord.ReadIM(OutSystems.NssAdvanced_Excel.RCProtectionRecord)">
            <summary>
            Read from record
            </summary>
            <param name="r"> Record</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.Util.ApplyFormatToRange(OfficeOpenXml.ExcelRange,OutSystems.NssAdvanced_Excel.RCCellFormatRecord)">
            <summary>
            Apply the specified format to a range of cells
            </summary>
            <param name="range">The range of cells to apply the formatting to</param>
            <param name="format">The format to apply to the range of cells</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.Util.ApplyConditionalFormattingStyle(OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting,OutSystems.NssAdvanced_Excel.RCConditionalFormatStyleRecord)">
            <summary>
            Apply conditional formatting style to rule style property
            </summary>
            <param name="style"></param>
            <param name="ssStyle"></param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.Util.CastDimension(OfficeOpenXml.ExcelAddressBase)">
            <summary>
            
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.Util.CastAddress(OfficeOpenXml.ExcelCellAddress)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.Util.LogMessage(System.Object)">
            <summary>
            Log a message to the General Log
            </summary>
            <param name="message">What to log</param>
        </member>
        <member name="M:OutSystems.NssAdvanced_Excel.Util.stringToChartType(System.String)">
            <summary>
            
            </summary>
            <param name="chartType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
